Stage 1: Console based protoype:
- our project was highly dependent on gui and interface, however we wanted to get a simple console version of monopoly first which foucused on getting the basic logic and rules mentioned in our scope working
At our first attempt at trying the game, we had:
1. the board layout was being printed in text form, listing each space by name and index.
2. The player can roll, move accordingly and then video information about the space they are on.
    eg: they will be told they are on x/13- this was stating which position they were on. 
3. core systems were implemented: such as player balance, cost and jail counts
    - it will also tell them how much they have 
    - and how much a space costs
4. command buttons were made: next player, roll, buy and move. 
This version of our game confirmed that movement and player state logic functioned properly 

Stage 2:ImGui
- in this stage, we developed a graphical interface using ImGui. This step took our console game project into a visual protoype monoply with clear layout and colour groups
Some of the key updates include:
1. A  fully rendered monoply board showing all forty spaces in their correct order. 
    - we have a complete 40-tile monopoly board, with all property groups placed around the edges.
2. each tile is colour coded to match its property 
3. a side panel is provided for user controls- same from stage 1. 
4. a debug window displayed live values for plyer/s balance, current space and movement. 
5. support for multiple players was added, so players can alternate and play.
this stage was a milestone. it marked the transition our team was able to change our text based game to a visully complete board, with combined logic and interactive GUI.

Stage 3: Functional and complete (?)
- this is the point we feel like we have a fully interactive game, with working logic, controls and UI feedback.
What we achieved in this stage:
1. player tokes (P1 and P2) can move accurately on the board according to respective dice rolls. 
2. the Go to jail or the jail system operates correctly, players are sent to jail, movement restrictions apply and if and when the bail condiitons are met, they can return 
    - The debug panel was used to move the position of P1 to random positions on the board and then to the Go To Jail space to ensure P1 would not gain $200 by passing Go.
3, Since jail disables movement or buying options, the game now can control the apperance, disapperance and player status dynamically based on their state.
4. Each board tile is clickable, with an instantly updating panel displaying the tiles' name, colour group, type, if it can be owned, and the owner. 
4. the turn system is functional, allowing players to smoothly take turns and alternate. 


Railroad Rent Test 1: Owning multiple railroads affect rent properly
- Input:
P1 moves to and buys all railroads
P2 lands on first railroad (position 5)

- Expected output:
P2 balance -200

- Actual output:
P2 balance didn't change
FAIL

Railroad Rent Test 2: Fixed getRailroads to reference owner.
- Input:
Same as Test 1

- Expected output:
Same as Test 1

- Actual output:
P2 balance -200
SUCCESS


House buy Test 1: Buy & rent affecting of houses
- Input:
P1 buys Oriental Avenue
P1 buys 3 houses on property
P2 lands on Oriental Avenue

- Expected output:
P1 owns 3 houses on Oriental Avenue
P2 balance -270

- Actual output:
P1 owns 3 houses on Oriental Avenue
P2 balance -270
SUCCESS


Utility rent Test 1: Test rent UI for utilities.
- Input:
P1 buys electric company
P2 lands on electric company

- Expected output:
Controls UI changes to roll and pay

- Actual output:
Controls stays the same
FAIL

Utility rent Test 2: Modified and fixed land & payRent logic.
- Input:
Same as Test 1

- Expected output:
Same as Test 1

- Actual output 
Controls stays the same
FAIL

Utility rent Test 3: Added utilityStatus functionality similar to jail
- Input:
Same as Test 1

- Expected output:
Same as Test 1

- Actual output 
Controls UI changes to roll and pay
SUCCESS

Utility rent Test 4: UI operation & pay rent test.
- Input
P1 buys electric company
P2 lands on electric company
P2 rolls dice
P2 pays rent

- Expected output:
Controls UI changes to roll and pay
Roll produces random number, button deactivates. Pay button activates.
Rent is paid. P2 -roll*4 balance, P1 +roll*4 balance.

- Actual output
Controls UI changes to roll and pay
Roll produces random number, button deactivates. Pay button activates.
Rent is paid. P2 -roll*4 balance, P1 +roll*4 balance.
SUCCESS


Jail/Go To Jail player position Test 1: A single player goes to jail test
- Input
P1 lands on Go To Jail (position 30)

- Expected output
Position of P1 is set to the Jail space. 

- Actual output
Position of P1 is set to the Jail space. 
SUCCESS

Jail/Go To Jail player position Test 2: Testing no move can be made after being sent to jail
- Input
P1 rolls dice
P1 lands on Go To Jail (position 30)

- Expected output
Position of P1 is set to the Jail space. 
Player cannot make any other move (player's turn is considered to be over after being sent to jail)

- Actual output
Position of P1 is set to the Jail space. 
Player can pay bail to get out of jail but cannot roll. After paying bail, player cannot make any other move. Effectively, the player cannot make any other move.
SUCCESS ?

Jail/Go To Jail player position Test 3: Testing paying bail immediately after being sent to jail
- Input
P1 rolls dice
P1 lands on Go To Jail (position 30)
P1 pays bail
P1 ends turn
P2 ends turn
P1 rolls dice
P1 moves

- Expected output
Position of P1 is set to the Jail space. 
P1's balance decreases by 50.
After P2 ends their turn, P1 able to roll dice and move to respective space.

- Actual output
Position of P1 is set to the Jail space. 
P1's balance decreases by 50.
After P2 ends their turn, P1 able to roll dice and move to respective space.
SUCCESS

Jail/Go To Jail player position Test 4: Testing paying bail one turn after being sent to jail
- Input
P1 rolls dice
P1 lands on Go To Jail (position 30)
P1 ends turn
P2 ends turn
P1 pays bail
P1 rolls dice
P1 moves

- Expected output
Position of P1 is set to the Jail space. 
After P2 ends their turn, P1's balance decreases by 50 and P1 able to roll dice and move to respective space.

- Actual output
Position of P1 is set to the Jail space. 
After P2 ends their turn, P1's balance decreases by 50 and P1 able to roll dice and move to respective space.
SUCCESS

Jail/Go To Jail player position Test 5: multiple players sent to jail
- Input
P1 rolls dice
P1 lands on Go To Jail (position 30)
P1 ends turn
P2 rolls dice
P2 lands on Go To Jail (position 30)
P2 ends turn
P3 rolls dice
P3 lands on Go To Jail (position 30)
P3 ends turn

- Expected output
Position of P1 is set to the Jail space. 
Position of P2 is set to the Jail space. 
Position of P3 is set to the Jail space. 
Players are unable to take any action other than pay bail immediately after being sent to jail.

- Actual output
Position of P1 is set to the Jail space. 
Position of P2 is set to the Jail space. 
Position of P3 is set to the Jail space. 
Players are unable to take any action other than pay bail immediately after being sent to jail.
SUCCESS

Jail/Go To Jail Test 6: Roll double to get out of jail
- Input
P1 rolls dice and lands on Go To Jail
P2 ends turn
P1 rolls double and moves to relevant space

- Expected output
Position of P1 is set to the Jail space. 
After P2 ends turn, P1 rolls for a double and moves the relevant amount of spaces.

- Actual output
Position of P1 is set to the Jail space. 
After P2 ends turn, P1 rolls for a double and moves the relevant amount of spaces.
SUCCESS


Tax (+ Chance/Community Chest) Test 1: Tax space functionality for a single player test
- Input
P1 lands on Income Tax space (position 4)

- Expected output
P1 at position 4. P1's money decreased by 200. 

- Actual output
P1 at position 4. P1's money decreased by 200. 
SUCCESS

Tax (+ Chance/Community Chest) Test 2: tax space functionality for a multiple players test
- Input
P1 rolls dice
P1 lands on Income Tax space (position 4)
P2 rolls dice
P2 lands on Income Tax space (position 4)

- Expected output
P1 at position 4. P1's balance decreased by 200. 
P2 at position 4. P2's balance decreased by 200. 

- Actual output
P1 at position 4. P1's balance decreased by 200. 
P2 at position 4. P2's balance decreased by 200. 
SUCCESS

